package com.orwlw.net;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.orwlw.activity.R;
import com.orwlw.model.Comm;
import com.orwlw.model.Comm_Category;
import com.orwlw.model.QuestionsBean;

public class ConvertToBean {
	// private final static String
	// serviceURL="http://webalone.orwlw.com/DataBaseUnite.asmx";

	public final static String serviceURL = "http://webalone.orwlw.com/DataBaseUnite.asmx?wsdl";
	public final static String nameSpace = "http://tempuri.org/";

	private SyncHelper syncHelper;
	private Context mContext;

	public ConvertToBean(Context context) {
		// TODO Auto-generated constructor stub
		syncHelper = new SyncHelper();
		this.mContext = context;

	}

	/**
	 * 获得所有问卷问题列表
	 * 
	 * @param methodName
	 *            方法名
	 * @param propertys
	 *            添加参数
	 * @return
	 */
	public List<QuestionsBean> getAllCheckItem(String methodName,
			HashMap<String, String> propertys) {

		String soapAction = nameSpace + methodName;
<<<<<<< .mine
=======


//		String json = syncHelper.getServerMsg(nameSpace, methodName,
//				serviceURL, soapAction, propertys);

>>>>>>> .r1220
		 String json = syncHelper.getServerMsg(nameSpace, methodName,
		 serviceURL, soapAction, propertys);
<<<<<<< .mine
=======

>>>>>>> .r1220
		// 测试用
<<<<<<< .mine

=======

	    //String json = readFile();
		System.out.println("json=" + json);

>>>>>>> .r1220
		//String json = readFile();
<<<<<<< .mine
		System.out.println("json=" + json);   
=======


>>>>>>> .r1220
		Type listType = new TypeToken<LinkedList<QuestionsBean>>() {
		}.getType();
		Gson gson = new Gson();
		LinkedList<QuestionsBean> checkitem = gson.fromJson(json, listType);

		if (checkitem != null)
			System.out.println("题目" + checkitem.get(0).getF_ITEM_NAME());

		// 同步到本地数据库
		// myDBHelper.insertAllCustom(customs);
		return checkitem;
	}

	/***
	 * 同步所有商品到本地
	 * 
	 * @param methodName
	 *            ‘GetComms’
	 * @param propertys
	 *            ‘personno’
	 * @return
	 */
	public List<Comm> getAllComm(String methodName,
			HashMap<String, String> propertys) {
		String soapAction = nameSpace + methodName;
		String json = syncHelper.getServerMsg(nameSpace, methodName,
				serviceURL, soapAction, propertys);
		System.out.println("json=" + json);

		Type listType = new TypeToken<LinkedList<Comm>>() {
		}.getType();
		Gson gson = new Gson();
		LinkedList<Comm> comms = gson.fromJson(json, listType);

		return comms;
	}

	public List<Comm_Category> getAllComm1(String methodName,
			HashMap<String, String> propertys) {
		String soapAction = nameSpace + methodName;
		String json = syncHelper.getServerMsg(nameSpace, methodName,
				serviceURL, soapAction, propertys);
		System.out.println("json=" + json);

		Type listType = new TypeToken<List<Comm_Category>>() {
		}.getType();
		Gson gson = new Gson();
		List<Comm_Category> comms = gson.fromJson(json, listType);
		for (int i = 0; i < comms.size(); i++) {
			System.out.println(comms.get(i).getF_COMM_CATEGORY());
		}
		return comms;
	}

	private String readFile() {
		Resources res = mContext.getResources();
		InputStream in = null;
		BufferedReader br = null;
		StringBuffer sb = new StringBuffer();
		sb.append("");
		try {
			in = res.openRawResource(R.raw.test);
			String str;
			br = new BufferedReader(new InputStreamReader(in, "GBK"));
			while ((str = br.readLine()) != null) {
				sb.append(str);
				sb.append("\n");
			}
		} catch (NotFoundException e) {
			Toast.makeText(mContext, "文本文件不存在", 100).show();
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			Toast.makeText(mContext, "文本编码出现异常", 100).show();
			e.printStackTrace();
		} catch (IOException e) {
			Toast.makeText(mContext, "文件读取错误", 100).show();
			e.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (br != null) {
					br.close();
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return sb.toString();
	}

	/*
	 * 删除文件的方法
	 */
	public boolean deleteFile(String sPath) {
		boolean flag = false;
		File file = new File(sPath);
		// 路径为文件且不为空则进行删除
		if (file.isFile() && file.exists()) {
			file.delete();
			flag = true;
		}
		return flag;
	}

	/*
	 * 读取字符串
	 */
	public String readTxtFile(String filePath) {
		StringBuffer sb = new StringBuffer();
		try {
			String encoding = "GBK";
			File file = new File(filePath);

			if (file.isFile() && file.exists()) { // 判断文件是否存在
				InputStreamReader read = new InputStreamReader(
						new FileInputStream(file), encoding);// 考虑到编码格式
				BufferedReader bufferedReader = new BufferedReader(read);
				String lineTxt = null;
				while ((lineTxt = bufferedReader.readLine()) != null) {
					sb.append(lineTxt);
				}
				read.close();

			} else {
				System.out.println("找不到指定的文件");

			}
		} catch (Exception e) {
			System.out.println("读取文件内容出错");
			e.printStackTrace();
		}
		return sb.toString();

	}

}
